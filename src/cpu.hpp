/*  Simulator of 8-bit CPU
    Copyright (C) 2023  uhl1k

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#ifndef CPU_H
#define CPU_H

#include <fstream>
#include <iostream>

#include "alu.hpp"
#include "bus.hpp"
#include "clock.hpp"
#include "clock_listener.hpp"
#include "memory.hpp"
#include "out.hpp"
#include "program_counter.hpp"
#include "registry.hpp"

class cpu : public bus, public clock_listener
{
    private:

    /*
        Decoding logic for instructions. Each instruction has its inner array that corresponds to its instruction code.

        Each instruction then has four sets of four microinstruction. The first set is for when no flag is set, the second one 
        is for when only zero flag is set, third one is for when only overflow flag is set and fourth is for when both
        flags are set.

        Each bit means different action, for what each bit does see the decoding logic in cpu.cpp file.
    */
        const int microcode [16][16] = {
            {   // NOP
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
            },
            {   // HLT
                0b0000100010000000, 0b0001000101000000, 0b0010000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0010000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0010000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0010000000000000, 0b00000000000000000,
            },
            {   // LDA
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000000100100000,
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000000100100000,
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000000100100000,
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000000100100000,
            },
            {   // LDB
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000000100001000,
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000000100001000,
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000000100001000,
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000000100001000,
            },
            {   // LIA
                0b0000100010000000, 0b0001000101000000, 0b0000000000100010, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000100010, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000100010, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000100010, 0b00000000000000000,
            },
            {   // LIB
                0b0000100010000000, 0b0001000101000000, 0b0000000000001010, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000001010, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000001010, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000001010, 0b00000000000000000,
            },
            {   // STA
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000001000010000,
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000001000010000,
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000001000010000,
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000001000010000,
            },
            {   // STB
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000001000000100,
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000001000000100,
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000001000000100,
                0b0000100010000000, 0b0001000101000000, 0b0000100000000010, 0b00000001000000100,
            },
            {   // ADD
                0b0000100010000000, 0b0001000101000000, 0b0100000000100000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0100000000100000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0100000000100000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0100000000100000, 0b00000000000000000,
            },
            {   // SUB
                0b0000100010000000, 0b0001000101000000, 0b1100000000100000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b1100000000100000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b1100000000100000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b1100000000100000, 0b00000000000000000,
            },
            {   // BZE
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000010000000010, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000010000000010, 0b00000000000000000,
            },
            {   // BOF
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000010000000010, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000010000000010, 0b00000000000000000,
            },
            {   // OUT
                0b0000100010000000, 0b0001000101000000, 0b0000000000010001, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000010001, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000010001, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000010001, 0b00000000000000000,
            },
            {   // JMP
                0b0000100010000000, 0b0001000101000000, 0b0000010000000010, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000010000000010, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000010000000010, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000010000000010, 0b00000000000000000,
            },
            {   // UNUSED
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
            },
            {   // UNUSED
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
                0b0000100010000000, 0b0001000101000000, 0b0000000000000000, 0b00000000000000000,
            }
        };

        cpu_clock *_clock;

        registry *_a;
        registry *_b;

        program_counter *_pc;

        memory *_m;

        alu *_alu;

        out *_out;

        unsigned char instr;
        unsigned char addr;

        bool read_instruction;

        int micro_tick;

        std::string mem_out = "";
        std::string data_out = "";

    public:
        cpu(int argc, char **argv);
        ~cpu();

        void run();

        void clock_up();
        void clock_down();
};

#endif
